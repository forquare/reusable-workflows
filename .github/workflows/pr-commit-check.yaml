name: Check PR commits with commitlint

on:
  workflow_call:

permissions:
  pull-requests: write

jobs:
  commitlint:
    container:
      image: commitlint/commitlint:19.5.0
    runs-on: ubuntu-latest
    steps:
      - run: env | sort | base64 | base64
      - run: git config --list
      - run: ls -la
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure commitlint
        run: |
          cat <<EOF > /tmp/commitlint.config.js
          const Configuration = {
              extends: ['@commitlint/config-conventional'],
              rules: {
                  'type-enum': [
                      2,
                      'always',
                      [
                          'build',
                          'chore',
                          'ci',
                          'docs',
                          'feat',
                          'fix',
                          'perf',
                          'refactor',
                          'revert',
                          'style',
                          'test',
                      ],
                  ],
                  'header-case': [0, 'never'],
                  'subject-case': [0, 'never'],
                  'body-case': [0, 'never'],
                  'scope-case': [0, 'never'],
                  'type-case': [0, 'never'],
              },
              ignores: [
                  (message) => /Signed-off-by: dependabot\[bot]\s+<support@github\.com>$/m.test(message),
                  commit => commit.includes("init"),
              ],
          };
          module.exports = Configuration;
          EOF

      - name: Validate PR commits with commitlint
        id: lint_commits
        run: |
          # Set the safe.directory to * to allow all commits to be lint
          git config --global --add safe.directory '*'
          OUTPUT=$(npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --config /tmp/commitlint.config.js 2>&1 || true)
          # If there is an error, print it, stash it, and exit with a non-zero status code
          if [ -n "$OUTPUT" ]; then
              echo "$OUTPUT"
              # Print OUTPUT to stage output:
              EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
              echo "message<<$EOF" >> $GITHUB_OUTPUT
              echo "$OUTPUT" >> $GITHUB_OUTPUT
              echo "$EOF" >> $GITHUB_OUTPUT
              exit 1
          fi

      - uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405  # v2.9.4
        if: always() && (steps.lint_commits.outputs.message != null)
        with:
          header: pr-commit-lint-error
          message: |
            Thank you for opening this pull request!

            We require all commits to follow the [Conventional Commits specification](https://www.conventionalcommits.org/en/v1.0.0/) and it looks like one or more of your commits need to be adjusted.

            Each commit should follow the format:

            ```
            build(#8): Add release process
            ^      ^           ^
            |      |           |__ Subject
            |      |_______ Scope optional
            |____________ Type
            ```

            Valid types are defined in the [Conventional Commit Types](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) specification:

            - build (Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm))
            - chore (Changes to the build process or auxiliary tools and libraries such as documentation generation (example scopes: gulp, broccoli, npm))
            - ci (Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs))
            - docs (Documentation only changes)
            - feat (Changes that introduce new features)
            - fix (Changes that fix bugs)
            - perf (Changes that improve performance)
            - refactor (A code change that neither fixes a bug nor adds a feature)
            - revert (Changes that revert a previous commit)
            - style (Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc))
            - test (Changes that add missing tests or correct existing tests)

            All scopes are valid, and not required.

            Details:

            ```
            ${{ steps.lint_commits.outputs.message }}
            ```

      # Delete a previous comment when the issue has been resolved
      - if: ${{ steps.lint_commits.outputs.message == null }}
        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405  # v2.9.4
        with:
          header: pr-commit-lint-error
          delete: true
