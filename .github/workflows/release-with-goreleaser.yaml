name: Release with Go Releaser

on:
  workflow_call:
    inputs:
      release_type:
        description: 'The type of release to create, e.g., "patch", "minor", "major", or a specific tag name.'
        required: true
        type: string

permissions:
  contents: write

jobs:
  check_files:
    runs-on: ubuntu-latest
    outputs:
      skip_release: ${{ steps.check.outputs.skip_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493  # v4.2.2

      - name: 'Check for files_that_skip_release'
        run: |
          if [ ! -f .github/files_that_skip_release ]; then
            echo "File .github/files_that_skip_release does not exist. Skipping check."
            echo "skip_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: 'Get changed files'
        id: 'get_files'
        uses: masesgroup/retrieve-changed-files@491e80760c0e28d36ca6240a27b1ccb8e1402c13  # v3.0.0

      - name: 'Checking files'
        id: 'check'
        run: |
          echo "Skipping release - default"
          echo "skip_release=true" >> $GITHUB_OUTPUT

          if echo ${{ steps.get_files.outputs.all }} | tr ' ' '\n' | grep -Ev $(grep -Ev '^#|^$' .github/files_that_skip_release | tr '\n' '|' | sed 's/|$//'); then
            echo "Not skipping release"
            echo "skip_release=false" >> $GITHUB_OUTPUT
          fi

  tag:
    needs: check_files
    if: needs.check_files.outputs.skip_release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493  # v4.2.2

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          git fetch --prune --unshallow || true

          latest_tag=''

          for ref in $(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags); do
            tag="${ref#refs/tags/}"
            if echo "${tag}" | grep -Eq '^v([0-9]+)\.([0-9]+)\.([0-9]+)(-([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*))?(\+[0-9A-Za-z-]+)?$'; then
              latest_tag="${tag}"
              break
            fi
          done

          if [ "${latest_tag}" = '' ]; then
            latest_tag='v0.0.0'
          fi

          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: calculate_version
        run: |
          latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          echo "Latest tag: ${latest_tag}"

          release_type="${{ inputs.release_type }}"
          echo "Release type: ${release_type}"

          case "${release_type}" in
            patch)
              new_version=$(echo "${latest_tag}" | awk -F. -v OFS=. '{print $1, $2, $3+1}')
              ;;
            minor)
              new_version=$(echo "${latest_tag}" | awk -F. -v OFS=. '{print $1, $2+1, 0}')
              ;;
            major)
              new_version=$(echo "${latest_tag}" | awk -F. -v OFS=. '{print "v"$1+1, 0, 0}')
              ;;
            *)
              new_version="${release_type}"
              ;;
          esac

          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@a22cf08638b34d5badda920f9daf6e72c477b07b  # v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false
          custom_tag: ${{ steps.calculate_version.outputs.new_version }}

  build_and_release:
    needs: tag
    if: needs.check_files.outputs.skip_release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493  # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00  # 6.0.0
        with:
          go-version: '^1.24'
          cache: false

      - name: GoReleaser Action
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a  # v6.4.0
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
